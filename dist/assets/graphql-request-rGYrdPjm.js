import{p as N,a as P}from"./graphql-BS3ZITc9.js";import{c as m,C as E,b as R}from"./cross-fetch-Ml2K_YIJ.js";const A=JSON,M=e=>e.toUpperCase(),$=e=>{const r={};return e.forEach((s,t)=>{r[t]=s}),r},O=(e,r,s)=>e.document?e:{document:e,variables:r,requestHeaders:s,signal:void 0},x=(e,r,s)=>e.query?e:{query:e,variables:r,requestHeaders:s,signal:void 0},z=(e,r)=>e.documents?e:{documents:e,requestHeaders:r,signal:void 0},H=e=>{var t,i;let r;const s=e.definitions.filter(a=>a.kind==="OperationDefinition");return s.length===1&&(r=(i=(t=s[0])==null?void 0:t.name)==null?void 0:i.value),r},C=e=>{if(typeof e=="string"){let s;try{const t=N(e);s=H(t)}catch{}return{query:e,operationName:s}}const r=H(e);return{query:P(e),operationName:r}};class w extends Error{constructor(r,s){const t=`${w.extractMessage(r)}: ${JSON.stringify({response:r,request:s})}`;super(t),Object.setPrototypeOf(this,w.prototype),this.response=r,this.request=s,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,w)}static extractMessage(r){var s,t;return((t=(s=r.errors)==null?void 0:s[0])==null?void 0:t.message)??`GraphQL Error (Code: ${r.status})`}}const g=e=>{let r={};return e&&(typeof Headers<"u"&&e instanceof Headers||E&&R.Headers&&e instanceof R.Headers?r=$(e):Array.isArray(e)?e.forEach(([s,t])=>{s&&t!==void 0&&(r[s]=t)}):r=e),r},S=e=>e.replace(/([\s,]|#[^\n\r]+)+/g," ").trim(),T=e=>{if(!Array.isArray(e.query)){const t=e,i=[`query=${encodeURIComponent(S(t.query))}`];return e.variables&&i.push(`variables=${encodeURIComponent(t.jsonSerializer.stringify(t.variables))}`),t.operationName&&i.push(`operationName=${encodeURIComponent(t.operationName)}`),i.join("&")}if(typeof e.variables<"u"&&!Array.isArray(e.variables))throw new Error("Cannot create query with given variable type, array expected");const r=e,s=e.query.reduce((t,i,a)=>(t.push({query:S(i),variables:r.variables?r.jsonSerializer.stringify(r.variables[a]):void 0}),t),[]);return`query=${encodeURIComponent(r.jsonSerializer.stringify(s))}`},I=e=>async r=>{const{url:s,query:t,variables:i,operationName:a,fetch:c,fetchOptions:n,middleware:o}=r,y={...r.headers};let u="",l;e==="POST"?(l=L(t,i,a,n.jsonSerializer),typeof l=="string"&&(y["Content-Type"]="application/json")):u=T({query:t,variables:i,operationName:a,jsonSerializer:n.jsonSerializer??A});const d={method:e,headers:y,body:l,...n};let f=s,q=d;if(o){const h=await Promise.resolve(o({...d,url:s,operationName:a,variables:i})),{url:p,...j}=h;f=p,q=j}return u&&(f=`${f}?${u}`),await c(f,q)};class B{constructor(r,s={}){this.url=r,this.requestConfig=s,this.rawRequest=async(...t)=>{const[i,a,c]=t,n=x(i,a,c),{headers:o,fetch:y=m,method:u="POST",requestMiddleware:l,responseMiddleware:d,...f}=this.requestConfig,{url:q}=this;n.signal!==void 0&&(f.signal=n.signal);const{operationName:h}=C(n.query);return b({url:q,query:n.query,variables:n.variables,headers:{...g(v(o)),...g(n.requestHeaders)},operationName:h,fetch:y,method:u,fetchOptions:f,middleware:l}).then(p=>(d&&d(p),p)).catch(p=>{throw d&&d(p),p})}}async request(r,...s){const[t,i]=s,a=O(r,t,i),{headers:c,fetch:n=m,method:o="POST",requestMiddleware:y,responseMiddleware:u,...l}=this.requestConfig,{url:d}=this;a.signal!==void 0&&(l.signal=a.signal);const{query:f,operationName:q}=C(a.document);return b({url:d,query:f,variables:a.variables,headers:{...g(v(c)),...g(a.requestHeaders)},operationName:q,fetch:n,method:o,fetchOptions:l,middleware:y}).then(h=>(u&&u(h),h.data)).catch(h=>{throw u&&u(h),h})}batchRequests(r,s){const t=z(r,s),{headers:i,...a}=this.requestConfig;t.signal!==void 0&&(a.signal=t.signal);const c=t.documents.map(({document:o})=>C(o).query),n=t.documents.map(({variables:o})=>o);return b({url:this.url,query:c,variables:n,headers:{...g(v(i)),...g(t.requestHeaders)},operationName:void 0,fetch:this.requestConfig.fetch??m,method:this.requestConfig.method||"POST",fetchOptions:a,middleware:this.requestConfig.requestMiddleware}).then(o=>(this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(o),o.data)).catch(o=>{throw this.requestConfig.responseMiddleware&&this.requestConfig.responseMiddleware(o),o})}setHeaders(r){return this.requestConfig.headers=r,this}setHeader(r,s){const{headers:t}=this.requestConfig;return t?t[r]=s:this.requestConfig.headers={[r]:s},this}setEndpoint(r){return this.url=r,this}}const b=async e=>{const{query:r,variables:s,fetchOptions:t}=e,i=I(M(e.method??"post")),a=Array.isArray(e.query),c=await i(e),n=await D(c,t.jsonSerializer??A),o=Array.isArray(n)?!n.some(({data:u})=>!u):!!n.data,y=Array.isArray(n)||!n.errors||Array.isArray(n.errors)&&!n.errors.length||t.errorPolicy==="all"||t.errorPolicy==="ignore";if(c.ok&&y&&o){const{errors:u,...l}=(Array.isArray(n),n),d=t.errorPolicy==="ignore"?l:n;return{...a?{data:d}:d,headers:c.headers,status:c.status}}else{const u=typeof n=="string"?{error:n}:n;throw new w({...u,status:c.status,headers:c.headers},{query:r,variables:s})}},L=(e,r,s,t)=>{const i=t??A;if(!Array.isArray(e))return i.stringify({query:e,variables:r,operationName:s});if(typeof r<"u"&&!Array.isArray(r))throw new Error("Cannot create request body with given variable type, array expected");const a=e.reduce((c,n,o)=>(c.push({query:n,variables:r?r[o]:void 0}),c),[]);return i.stringify(a)},D=async(e,r)=>{let s;return e.headers.forEach((t,i)=>{i.toLowerCase()==="content-type"&&(s=t)}),s&&(s.toLowerCase().startsWith("application/json")||s.toLowerCase().startsWith("application/graphql+json")||s.toLowerCase().startsWith("application/graphql-response+json"))?r.parse(await e.text()):e.text()},v=e=>typeof e=="function"?e():e,Q=(e,...r)=>e.reduce((s,t,i)=>`${s}${t}${i in r?String(r[i]):""}`,"");export{B as G,Q as g};
